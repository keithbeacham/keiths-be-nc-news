{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/healthcheck": {
    "description": "confirms server is online",
    "exampleResponse": { "msg": "server is online" }
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "GET /api/articles/:article_id": {
    "description": "serves a single article object corresponding to article_id with additional property of comment_count",
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "Living in the shadow of a great man",
        "topic": "mitch",
        "author": "butter_bridge",
        "body": "I find this existence challenging",
        "created_at": 1594329060000,
        "votes": 100,
        "comment_count": 11,
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
      }
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all articles not including 'body' but including 'comment_count', default ordered by 'created_at' descending. Can specify a 'topic' value to filter the output by the requested topic; 'sort_by' and 'order' keys to sort and order the returned array; a 'limit' key to set the maximum number of articles returned in the array; and a 'p' key which works in combination with 'limit' to enable pages of articles to be returned each of length 'limit'. p=1 for the first page etc. Returns a total_count of all of the articles in the database after any filter has been applied but discounting any 'limit' or 'p' set.",
    "queries": ["topic", "sort_by", "order", "limit", "p"],
    "exampleResponse": {
      "articles": [
        {
          "article_id": 5,
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
          "comment_count": 6
        }
      ],
      "total_count": 15
    }
  },
  "POST /api/articles": {
    "description": "adds a new article to the database, returning a complete article object including comment_count=0. Expects a body object including author, title, body, topic, article_img_url. If article_img_url is omitted, uses the default value. Uses the default values for votes (=0) and created_at (now). author and topic must already exist in the database",
    "exampleRequest": {
      "author": "lurker",
      "title": "a day in the life",
      "body": "it all started quite normally that day...",
      "topic": "mitch",
      "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
    },
    "exampleResponse": {
      "article": {
        "article_id": 15,
        "author": "lurker",
        "title": "a day in the life",
        "body": "it all started quite normally that day...",
        "topic": "mitch",
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
        "created_at": "2018-05-30T15:59:13.341Z",
        "votes": 0,
        "comment_count": 0
      }
    }
  },
  "GET /api/articles/:article_id/comments": {
    "description": "serves an array of all comment objects corresponding to article_id, default ordered by created_at descending",
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 14,
          "body": "This is a bad article name",
          "votes": 1,
          "author": "butter_bridge",
          "article_id": 6,
          "created_at": 1602433380000
        }
      ]
    }
  },
  "POST /api/articles/:article_id/comments": {
    "description": "inserts the given comment object into the database referencing the article_id. Expects a request object containing username and body, returns the corresponding comment object. Only accepts a comment from an existing username",
    "exampleRequest": {
      "username": "butter_bridge",
      "body": "new body"
    },
    "exampleResponse": {
      "comment": {
        "comment_id": 14,
        "body": "new body",
        "votes": 0,
        "author": "butter_bridge",
        "article_id": 6,
        "created_at": 1602433380000
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "increments the <votes> property on the requested <article_id>, responding with the updated article object",
    "exampleRequest": {
      "inc_votes": 10
    },
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "Living in the shadow of a great man",
        "topic": "mitch",
        "author": "butter_bridge",
        "body": "I find this existence challenging",
        "created_at": 1594329060000,
        "votes": 110,
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
      }
    }
  },
  "DELETE /api/comments/:comment_id": {
    "description": "deletes the given comment in the database, returns 204 and no body content.",
    "exampleResponse": {}
  },
  "PATCH /api/comments/:comment_id": {
    "description": "increments the votes property of the given comment by the value passed in the request object. Returns 200 and the updated comment object.",
    "exampleRequest": {
      "inc_votes": 10
    },
    "exampleResponse": {
      "comment_id": 7,
      "body": "I hate streaming noses",
      "votes": 11,
      "author": "icellusedkars",
      "article_id": 1,
      "created_at": 1604437200000
    }
  },
  "GET /api/users": {
    "description": "serves an array of all users including username, name and avatar_url",
    "queries": [],
    "exampleResponse": {
      "users": [
        {
          "username": "rogersop",
          "name": "paul",
          "avatar_url": "https://avatars2.githubusercontent.com/u/24394918?s=400&v=4"
        }
      ]
    }
  },
  "GET /api/users/:username": {
    "description": "serves an object of the requested username including username, name and avatar_url",
    "queries": [],
    "exampleResponse": {
      "user": {
        "username": "rogersop",
        "name": "paul",
        "avatar_url": "https://avatars2.githubusercontent.com/u/24394918?s=400&v=4"
      }
    }
  }
}
